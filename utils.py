"""
    –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    –í–∫–ª—é—á–∞–µ—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏
    –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–ª–æ–≤–∞–º–∏.
"""
import csv
import logging
import random

from database import Database
from config import config_logging
from buttons import translation_buttons, start_button, universal_buttons
from btn_text import BTN_VIEW_RATING, BTN_ADD_WORD, BTN_DEL_WORD, BTN_Back

config_logging()
logger = logging.getLogger('utils')


class GameUtils:
    """
        –ö–ª–∞—Å—Å —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.

        Attributes:
            bot (telebot.TeleBot): –û–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
            db (DatabaseUtils): –û–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self, bot):
        self.bot = bot
        self.db = DatabaseUtils()

    def get_user_name(self, message):
        """
            –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.

            –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç
            –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏.

            :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id
        user_info = self.db.search_user(user_id)
        if user_info is None:
            self.bot.send_message(chat_id, '–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
            self.bot.register_next_step_handler(message, self.save_user_name)
        else:
            self.bot.send_message(chat_id, '–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!!')
            self.start_game(message)

    def save_user_name(self, message):
        """
            –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É.

            –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ –∑–∞—Ç–µ–º
            –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å.

            :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ–≥–æ –∏–º—è.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id
        user_name = message.text

        self.db.save_user(user_name, user_id)

        self.bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!\n –î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞!!")
        self.start_game(message)

    def start_game(self, message):
        """
            –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É, –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞.

            –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ, –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ
            –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.

            :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
        """
        chat_id = message.chat.id
        word, correct_translation, text_buttons, id_word_db = self.word_generator(message)

        text_buttons.append(correct_translation)
        markup = translation_buttons(text_buttons)

        self.bot.send_message(chat_id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ '<b>{word}</b>'?",
                              reply_markup=markup, parse_mode="HTML")

        self.bot.register_next_step_handler_by_chat_id(chat_id, self.check_answer,
                                                       id_word_db, correct_translation)

    def check_answer(self, message, id_word: int, correct_translation: str):
        """
            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –æ—á–∫–∏.

            –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –æ—á–∫–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.
            –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ—á–∫–∏ –æ—Ç–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç
            –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.

            :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –≤—ã–±–æ—Ä–æ–º.
            :param id_word: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
            :param correct_translation: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
        """
        chat_id = message.chat.id
        user_answer = message.text
        user_id = message.from_user.id

        if user_answer == correct_translation:
            self.bot.send_message(chat_id, "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å! üåü +1 –±–∞–ª–ª!")
            self.db.update_points(user_id, 1)
            self.db.update_times_shown(user_id, id_word)
            self.start_game(message)

        elif user_answer == BTN_VIEW_RATING:
            result = self.display_player_rating(user_id)
            self.bot.send_message(chat_id, result, parse_mode='HTML')
            self.bot.send_message(chat_id, '–î—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
                                  reply_markup=start_button())

        elif user_answer == BTN_ADD_WORD:
            self.add_new_word(message)

        elif user_answer == BTN_DEL_WORD:
            self.dell_word_user(message)

        else:
            self.bot.send_message(chat_id, "–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫. –ù–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å! üíî -3 –±–∞–ª–ª–∞!")
            self.db.update_points(user_id, 3, add=False)
            self.start_game(message)

    def add_new_word(self, message):
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é
        –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
        –¢–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id
        self.bot.send_message(chat_id,
                              '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ—Ç, cat"):',
                              reply_markup=universal_buttons([BTN_Back]))
        self.bot.register_next_step_handler(message, self._save_new_word, user_id)

    def _save_new_word(self, message, user_id: int):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ (–¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–æ
        —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–∏–∑—É—á–∞–µ—Ç—Å—è" –∏–ª–∏ "–∏–∑—É—á–µ–Ω–æ").
        –¢–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º —Å–ª–æ–≤–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º.
        :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        """
        chat_id = message.chat.id
        text = message.text.lower().split(',')

        if text[0].strip() == BTN_Back.lower():
            self.start_game(message)

        else:
            if len(text) == 2:
                word = text[0].strip()
                translation = text[1].strip()

                if not self.db.search_word(word, user_id):
                    self.db.save_word(word, translation, user_id)
                    self.bot.send_message(chat_id,
                                          f'–°–ª–æ–≤–æ "{word}" —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º "{translation}" '
                                          f'–±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                          )

                    word_message = self._format_user_words(user_id)
                    self.bot.send_message(chat_id, word_message + '\n–î—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
                                          reply_markup=start_button(), parse_mode='HTML')

                else:
                    self.bot.send_message(chat_id,
                                          f'–°–ª–æ–≤–æ "{word}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
            else:
                self.bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    def dell_word_user(self, message):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.

        –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
        –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–º—É —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–±–æ—Ä–∞.
        –¢–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """

        user_id = message.from_user.id
        chat_id = message.chat.id
        word_message = self._format_user_words(user_id)

        self.bot.send_message(chat_id, word_message + '\n–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                              reply_markup=universal_buttons([BTN_Back]), parse_mode='HTML')
        self.bot.register_next_step_handler(message, self._delete_user_word, user_id)

    def _delete_user_word(self, message, user_id: int):
        """
        –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –µ–≥–æ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.

        –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
        –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –∏–ª–∏ –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ,
        –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤–æ.
        :param user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        chat_id = message.chat.id
        text = message.text.lower().strip()

        if text == BTN_Back.lower():
            self.start_game(message)
            return

        result = self.db.delete_word(text, user_id)

        if result:
            self.bot.send_message(chat_id,
                                  f'–°–ª–æ–≤–æ <b>{text.capitalize()}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n'
                                  '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.',
                                  reply_markup=start_button(),
                                  parse_mode="HTML")
        else:
            self.bot.send_message(chat_id,
                                  f'–°–ª–æ–≤–æ <b>{text.capitalize()}</b> –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n'
                                  '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.',
                                  reply_markup=start_button(),
                                  parse_mode="HTML")

    def _format_user_words(self, user_id: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å (–∏–∑—É—á–∞–µ—Ç—Å—è –∏–ª–∏ –∏–∑—É—á–µ–Ω–æ).

        :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        :return: –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤.
        """
        word_dict = self.db.get_user_word(user_id)
        word_list = []

        for word, times_shown in word_dict.items():
            status = "<b>–∏–∑—É—á–∞–µ—Ç—Å—è</b>" if times_shown is None or times_shown < 4 else "–∏–∑—É—á–µ–Ω–æ"
            word_list.append(f"{word} - {status}")

        word_message = "–°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏:\n" + "\n".join(word_list)
        return word_message

    def word_generator(self, message) -> tuple[str, str, list[str], int]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ª–æ–≤ (–∏–∑ CSV-—Ñ–∞–π–ª–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö),
        –∞ –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥. –¢–∞–∫–∂–µ –æ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫
        –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
                        –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (str), –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (str),
             —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ (list[str]) –∏ id —Å–ª–æ–≤–∞ –∏–∑ –ë–î (int).
        """
        id_user = message.from_user.id
        flag = random.randint(0, 2)
        logger.debug(f'def word_generator:flag {flag}')
        if flag == 0:
            word_dict = self.read_words_csv(id_user)

        elif flag == 1:
            word_dict = self.read_words_bd_added_user(id_user)

        else:
            word_dict = self.read_words_bd(id_user)

        logger.debug(f'def word_generator:word_dict {word_dict}')

        try:
            word = list(word_dict.keys())[0]
            translation = word_dict[word][0]
            id_word = word_dict[word][1]
            text_buttons = [item[0] for item in list(word_dict.values())[1:]]
            return word, translation, text_buttons, id_word

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤: {e}')

            word_dict = self.get_fallback_words()
            word = list(word_dict.keys())[0]
            translation = word_dict[word]
            id_word_db = self.db.search_word(word)
            text_buttons = list(word_dict.values())[1:]
            return word, translation, text_buttons, id_word_db

    def read_words_csv(self, user_id: int, quantity: int = 4) -> dict:
        """
            –ß–∏—Ç–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ CSV-—Ñ–∞–π–ª–∞,
            –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤–º–µ—Å—Ç–µ
            —Å –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ CSV-—Ñ–∞–π–ª–∞.

            :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
            :param quantity: –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                             –¥–ª—è —á—Ç–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).

            :return words_dict: dict –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π
                                –∏ –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π.
        """
        logger.debug('–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è read_words_csv')
        words_dict = {}
        try:
            with open('russian_english_words.csv', newline='', encoding='utf-8') as csvfile:
                reader = csv.reader(csvfile)
                words = list(reader)

            selected_words = random.sample(words[1:],
                                           len(words[1:]) if len(words[1:]) < quantity else quantity)

            for word_list in selected_words:
                id_word = self.db.search_word(word_list[0])
                if id_word is None:
                    id_word = self.db.save_word(word_list[0], word_list[1])

                words_dict[word_list[0]] = [word_list[1], id_word]

            if len(words_dict) < quantity:
                result = self.read_words_bd(user_id, quantity - len(words_dict))
                words_dict.update(result)

            remaining_words = [word for word in words if word not in selected_words]
            with open('russian_english_words.csv', 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                for word in remaining_words:
                    writer.writerow(word)

            return words_dict

        except Exception as e:
            logger.error(f'–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞ {e}')
            words_dict.update(self.read_words_bd(user_id, quantity))
            return words_dict

    def read_words_bd(self, user_id, quantity: int = 4) -> dict:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª 4 —Ä–∞–∑–∞,
        –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞,
        –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ CSV-—Ñ–∞–π–ª–∞.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        :param quantity: –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                             –¥–ª—è —á—Ç–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).

        :return: dict –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π –∏ –∏—Ö
                 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π.
        """
        logger.debug('–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è read_words_bd')
        result = self.db.get_random_words_for_user(user_id, quantity)

        if len(result) < quantity:
            csv_word = self.read_words_csv(user_id, quantity - len(result))
            result.update(csv_word)
        return result

    def read_words_bd_added_user(self, user_id) -> dict:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª 4 —Ä–∞–∑–∞,
        –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞,
        –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ CSV-—Ñ–∞–π–ª–∞.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.

        :return: dict –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π –∏ –∏—Ö
                 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π.
        """
        logger.debug('–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è read_words_bd_added_user')
        result = self.db.get_random_words_for_user(user_id, flag=True)

        if len(result) < 4:
            bd_word = self.read_words_bd(user_id, 4 - len(result))
            result.update(bd_word)
        return result

    def display_player_rating(self, telegram_user_id) -> str:
        """
            –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:
            - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–æ–ø-3, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –º–µ—Å—Ç–∞.
            - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ 4 –∏–ª–∏ 5 –º–µ—Å—Ç–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –µ–≥–æ –º–µ—Å—Ç–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ.
            - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ 6 –º–µ—Å—Ç–µ –∏–ª–∏ –Ω–∏–∂–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ø-3, –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –∏ –µ–≥–æ –º–µ—Å—Ç–æ.

            :param telegram_user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.

            :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        msg = ''
        rating_data = self.db.get_player_ratings()
        user_position = None
        for idx, user in enumerate(rating_data):
            if user['telegram_user_id'] == telegram_user_id:
                user_position = idx + 1
                break

        if user_position:
            if user_position <= 3:
                for idx, user in enumerate(rating_data[:3]):
                    msg += self._format_rating_entry(user_position, idx + 1, user)

            elif user_position in [4, 5]:
                for idx, user in enumerate(rating_data[:user_position]):
                    msg += self._format_rating_entry(user_position, idx + 1, user)

            else:
                for idx, user in enumerate(rating_data[:3]):
                    msg += f'{self._get_medal(idx + 1)} {user["name"]} - "{user["points"]} –æ—á–∫–æ–≤"\n'
                msg += '...\n'
                msg += f'<b>\t{user_position}.{rating_data[user_position - 1]["name"]} - ' \
                       f'"{rating_data[user_position - 1]["points"]} –æ—á–∫–æ–≤"</b>'
        else:
            msg += '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.'
        return msg

    def _format_rating_entry(self, user_position: int, idx: int, user: dict) -> str:
        """
            –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            :param user_position: –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.
            :param idx: –¢–µ–∫—É—â–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.
            :param user: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è –∏ –æ—á–∫–∏).

            :return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.
        """
        if user_position == idx:
            msg = f'<b>{self._get_medal(idx)} {user["name"]} - "{user["points"]} –æ—á–∫–æ–≤"</b>\n'
        else:
            msg = f'{self._get_medal(idx)} {user["name"]} - "{user["points"]} –æ—á–∫–æ–≤"\n'
        return msg

    def _get_medal(self, idx: int) -> str:
        """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ–¥–∞–ª—å-—ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç –∏–ª–∏ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.

            :param idx: –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.

            :return: –≠–º–æ–¥–∑–∏ –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç –∏–ª–∏ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.
        """
        if idx == 1:
            result = 'ü•á'
        elif idx == 2:
            result = 'ü•à'
        elif idx == 3:
            result = 'ü•â'
        else:
            result = f'{idx}.'
        return result

    def get_fallback_words(self, quantity: int = 4) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –∏–∑ 20 —Ä—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–∞—Ä.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç 4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –Ω–∞–ª–∏—á–∏–µ
        –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
        –∏, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        :param quantity: –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                             –¥–ª—è —á—Ç–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).

        :return: dict –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π –∏ –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
                 –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π.
        """
        logger.debug('–∑–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞')
        fallback_words = {
            '–∫–æ—Ç': 'cat',
            '—Å–æ–±–∞–∫–∞': 'dog',
            '–º–æ–ª–æ–∫–æ': 'milk',
            '—Ö–ª–µ–±': 'bread',
            '—è–±–ª–æ–∫–æ': 'apple',
            '–º–∞—à–∏–Ω–∞': 'car',
            '–¥–æ–º': 'house',
            '–æ–∫–Ω–æ': 'window',
            '–¥–µ—Ä–µ–≤–æ': 'tree',
            '–∫–Ω–∏–≥–∞': 'book',
            '—Ä—É—á–∫–∞': 'pen',
            '—Å—Ç–æ–ª': 'table',
            '—Å—Ç—É–ª': 'chair',
            '—á–∞—Å—ã': 'clock',
            '–∑–æ–Ω—Ç': 'umbrella',
            '—Å–æ–ª–Ω—Ü–µ': 'sun',
            '–ª—É–Ω–∞': 'moon',
            '–∑–≤–µ–∑–¥–∞': 'star',
            '—Ä—ã–±–∞': 'fish',
            '–ø—Ç–∏—Ü–∞': 'bird'
        }
        selected_words = random.sample(list(fallback_words.items()), quantity)
        words_dict = {}

        for word, translation in selected_words:
            check_word_bd = self.db.search_word(word)
            if check_word_bd is None:
                self.db.save_word(word, translation)
            words_dict[word] = translation

        return words_dict


class DatabaseUtils(Database):
    """
       –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –∫–ª–∞—Å—Å–∞ Database.
    """

    def __init__(self):
        super().__init__()

    def add_tabl(self):
        """
           –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
           - users: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
           - word: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–∞—Ö –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.
           - users_word: —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞.
       """
        table_name_user = 'users'
        columns_user = [
            ('id', 'SERIAL PRIMARY KEY'),
            ('telegram_user_id', 'BIGINT NOT NULL UNIQUE'),
            ('name', 'VARCHAR(255)'),
            ('points', 'INTEGER DEFAULT 0')
        ]

        table_name_word = 'word'
        columns_word = [
            ('id', 'SERIAL PRIMARY KEY'),
            ('user_id', 'BIGINT DEFAULT NULL'),
            ('russian_words', 'VARCHAR(255)'),
            ('translation', 'VARCHAR(255)'),

        ]

        table_name_user_word = 'users_word'
        columns_user_word = [
            ('id', 'SERIAL PRIMARY KEY'),
            ('user_id', 'INTEGER REFERENCES users(id) ON DELETE CASCADE'),
            ('word_id', 'INTEGER REFERENCES word(id) ON DELETE CASCADE'),
            ('times_shown', 'INTEGER DEFAULT 0')
        ]

        self.create_table(table_name_user, columns_user)
        self.create_table(table_name_word, columns_word)
        self.create_table(table_name_user_word, columns_user_word)

    def save_user(self, name: str, tg_user_id: int):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
        –≤ —Ç–∞–±–ª–∏—Ü—É `users` –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        :param name: str –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.
        :param tg_user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.
        """
        table_name = 'users'
        data = {
            'telegram_user_id': tg_user_id,
            'name': name
        }
        self.insert_data(table_name=table_name, data=data)

    def search_user(self, tg_user_id: int) -> dict:
        """
        –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ Telegram ID.

        –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É `users`, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ
        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å
        –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (ID, –∏–º—è, –æ—á–∫–∏). –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `None`.

        :param tg_user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.

        :return: dict –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (ID, –∏–º—è, –æ—á–∫–∏) –∏–ª–∏ `None`,
                      –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        table_name = 'users'
        columns = 'id,name,points'
        values = (tg_user_id,)
        condition = 'telegram_user_id = %s'
        result = self.select_data(table_name=table_name, columns=columns,
                                  values=values, condition=condition)
        if result:
            user_info = {
                'id': result[0][0],
                'name': result[0][1],
                'points': result[0][2]
            }
        else:
            user_info = None
        return user_info

    def search_word(self, word: str, user_id: int = None) -> int | None:
        """
        –ò—â–µ—Ç —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É `word`, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –ø–æ –µ–≥–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–∏—é.
        –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `user_id`, —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–∞,
            –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `None`.

        :param word: str –°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.
        :param user_id: int –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.
                        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.

        :return: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ `None`, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        table_name = 'word'
        condition = 'russian_words = %s '
        values = (word,)

        if user_id is not None:
            condition += 'AND user_id = %s'
            values = (word, user_id)
        else:
            condition += 'AND user_id IS NULL'

        result = self.select_data(table_name, 'id',
                                  condition=condition, values=values)
        if result:
            answer = result[0][0]
        else:
            answer = None
        return answer

    def save_word(self, word: str, translation: str, user_id: int = None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã `word` (—Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ) –∏
        `translation` (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥) –≤ —Ç–∞–±–ª–∏—Ü—É `word` –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä `user_id` (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram),
        –æ–Ω —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.

        :param word: str –°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        :param translation: str –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
        :param user_id: int –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.
                        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        """
        data = {
            'russian_words': word,
            'translation': translation
        }
        if user_id is not None:
            data['user_id'] = user_id

        table_name = 'word'
        result = self.insert_data(table_name, data)
        return result

    def get_random_words_for_user(self, user_id: int, quantity: int = 4,
                                  flag: bool = False) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å –µ–º—É –º–µ–Ω–µ–µ 4 —Ä–∞–∑,
            –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.

        –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—â–µ
            –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å 4 –∏ –±–æ–ª–µ–µ —Ä–∞–∑.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —Å–ª–æ–≤ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä `quantity` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).
        –ï—Å–ª–∏ `flag` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ `True`, –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –ï—Å–ª–∏ `flag` —Ä–∞–≤–µ–Ω `False`, –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.

        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞,
            –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏ id —Å–ª–æ–≤ –≤ –ë–î.

        :param user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        :param quantity: int –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).
        :param flag: bool –£–∫–∞–∑—ã–≤–∞–µ—Ç, –≤—ã–±–∏—Ä–∞—Ç—å –ª–∏ —Å–ª–æ–≤–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (`True`),
                     –∏–ª–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (`False`).

        :return: dict –°–ª–æ–≤–∞—Ä—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞,
                     –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏ id —Å–ª–æ–≤ –≤ –ë–î.
        """
        user_condition = f'AND w.user_id = {user_id}' if flag else 'AND w.user_id IS NULL'

        words_dict = {}
        table_name = 'word w'
        columns = 'w.russian_words, w.translation, w.id'
        condition = f"""
            w.id NOT IN (
                SELECT uw.word_id
                FROM users_word uw
                WHERE uw.user_id = (
                        SELECT u.id
                        FROM users u
                        WHERE u.telegram_user_id = {user_id}
                    
                        )
                GROUP BY uw.word_id
                HAVING SUM(uw.times_shown) >= 4
            )
            {user_condition}
            ORDER BY RANDOM()
            LIMIT {quantity};        
        """
        result_bd_word = self.select_data(table_name=table_name,
                                          columns=columns,
                                          condition=condition
                                          )
        for words in result_bd_word:
            words_dict[words[0]] = [words[1], words[2]]
        return words_dict

    def update_points(self, user_id: int, points: int, add=True):
        """
            –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—á–∫–∏.
            :param points: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
            :param add: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –¥–æ–±–∞–≤–ª—è—Ç—å (True) –∏–ª–∏ –≤—ã—á–∏—Ç–∞—Ç—å (False) –æ—á–∫–∏.
        """
        if add:
            data = {'points': f'points + {points}'}
        else:
            data = {'points': f'points - {points}'}

        table_name = 'users'
        condition = f'users.telegram_user_id = {user_id}'
        self.update_data(table_name=table_name, data=data, condition=condition)

    def update_times_shown(self, telegram_user_id: int, word_id: int):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        :param word_id: ID —Å–ª–æ–≤–∞.
        """
        table_name = 'users_word uw'
        columns = 'uw.id'
        condition = """ uw.word_id = %s
                            AND uw.user_id = (
                                SELECT u.id 
                                FROM users AS u
                                WHERE u.telegram_user_id = %s
                            );
                    """
        values = (word_id, telegram_user_id)
        user_word_id = self.select_data(table_name=table_name, columns=columns,
                                        condition=condition, values=values)
        if user_word_id:
            data = {'times_shown': 'times_shown + 1'}
            condition = 'id = %s'
            values = (user_word_id[0][0],)
            self.update_data(table_name=table_name[:-3], data=data,
                             condition=condition, values=values)
        else:
            user_id = self.select_data(table_name='users', columns='id',
                                       condition='telegram_user_id = %s',
                                       values=(telegram_user_id,))

            data = {
                'user_id': user_id[0][0],
                'word_id': word_id,
                'times_shown': 1
            }
            self.insert_data(table_name='users_word', data=data)

    def get_player_ratings(self) -> list:
        """
            –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –æ—á–∫–æ–≤.

            –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤,
            –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            –≤ Telegram, –∏–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.

            :return: list –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö,
                          –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤.
        """
        table_name = 'users ORDER BY points DESC'
        columns = 'telegram_user_id, name, points'

        result = self.select_data(table_name=table_name, columns=columns)
        rating_list = [{'telegram_user_id': row[0], 'name': row[1],
                        'points': row[2]} for row in result]
        return rating_list

    def get_user_word(self, user_id: int) -> dict:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.

        :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.

        :return dict: –°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                    –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        words = {}
        table_name = 'word w LEFT JOIN users_word uw ON w.id = uw.word_id'
        columns = 'w.russian_words, uw.times_shown'
        condition = 'w.user_id = %s'
        values = (user_id,)

        result = self.select_data(table_name=table_name, columns=columns,
                                  condition=condition, values=values)

        for word in result:
            words[word[0]] = word[1]

        return words

    def delete_word(self, word: str, user_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `word`, –µ—Å–ª–∏ –æ–Ω–æ
        –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ,
        —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî `False`.

        :param word: str –°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
        :param user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ª–æ–≤–æ.

        :return: bool –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ, –∏ `False` –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        table_name = 'word'
        condition = 'russian_words = %s AND user_id = %s'
        values = (word, user_id)

        result = self.delete_data(table_name=table_name, condition=condition, values=values)

        return result


if __name__ == '__main__':
    r = DatabaseUtils()
    print(r.get_player_ratings())
